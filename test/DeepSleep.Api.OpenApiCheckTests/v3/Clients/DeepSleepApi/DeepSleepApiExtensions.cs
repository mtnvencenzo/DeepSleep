// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DeepSleep.Api.OpenApiCheckTests.v3
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DeepSleepApi.
    /// </summary>
    public static partial class DeepSleepApiExtensions
    {
            /// <summary>
            /// Posts the basic object model with no doc attributes.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The route identifier.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            public static BasicObject PostBasicObjectModelNoDocAttributes(this IDeepSleepApi operations, int id, BasicObject body = default(BasicObject))
            {
                return operations.PostBasicObjectModelNoDocAttributesAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the basic object model with no doc attributes.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The route identifier.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BasicObject> PostBasicObjectModelNoDocAttributesAsync(this IDeepSleepApi operations, int id, BasicObject body = default(BasicObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostBasicObjectModelNoDocAttributesWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CustomObjectIdModel PostCustomObjectDeepModels(this IDeepSleepApi operations, int id, CustomObjectModel body = default(CustomObjectModel))
            {
                return operations.PostCustomObjectDeepModelsAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomObjectIdModel> PostCustomObjectDeepModelsAsync(this IDeepSleepApi operations, int id, CustomObjectModel body = default(CustomObjectModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostCustomObjectDeepModelsWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Posts the enum model with URI bound enums.
            /// </summary>
            /// <remarks>
            /// Offically posts the enum object to the service
            ///
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='explicitEnumProperty'>
            /// Gets or sets the explicit enum property. Possible values include: 'None',
            /// 'Item1', 'Item2'
            /// </param>
            public static EnumUriObjectModelRs PostEnumUriModelNoDocAttributes(this IDeepSleepApi operations, string explicitEnumProperty = default(string))
            {
                return operations.PostEnumUriModelNoDocAttributesAsync(explicitEnumProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the enum model with URI bound enums.
            /// </summary>
            /// <remarks>
            /// Offically posts the enum object to the service
            ///
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='explicitEnumProperty'>
            /// Gets or sets the explicit enum property. Possible values include: 'None',
            /// 'Item1', 'Item2'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnumUriObjectModelRs> PostEnumUriModelNoDocAttributesAsync(this IDeepSleepApi operations, string explicitEnumProperty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostEnumUriModelNoDocAttributesWithHttpMessagesAsync(explicitEnumProperty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Puts the enum model with URI bound enums.
            /// </summary>
            /// <remarks>
            /// Offically puts the enum object to the service
            ///
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='explicitEnumProperty'>
            /// Gets or sets the explicit enum property. Possible values include: 'None',
            /// 'Item1', 'Item2'
            /// </param>
            public static EnumUriObjectModelRs PutEnumUriModelNoDocAttributes(this IDeepSleepApi operations, string explicitEnumProperty = default(string))
            {
                return operations.PutEnumUriModelNoDocAttributesAsync(explicitEnumProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Puts the enum model with URI bound enums.
            /// </summary>
            /// <remarks>
            /// Offically puts the enum object to the service
            ///
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='explicitEnumProperty'>
            /// Gets or sets the explicit enum property. Possible values include: 'None',
            /// 'Item1', 'Item2'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnumUriObjectModelRs> PutEnumUriModelNoDocAttributesAsync(this IDeepSleepApi operations, string explicitEnumProperty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutEnumUriModelNoDocAttributesWithHttpMessagesAsync(explicitEnumProperty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch the enum model with URI bound enums.
            /// </summary>
            /// <remarks>
            /// Offically patches the enum object to the service
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='explicitEnumProperty'>
            /// The explicit enum property. Possible values include: 'None', 'Item1',
            /// 'Item2'
            /// </param>
            /// <param name='nullableExplicitEnumProperty'>
            /// The nullable explicit enum property. Possible values include: 'None',
            /// 'Item1', 'Item2'
            /// </param>
            public static EnumUriObjectModelRs PatchEnumUriModelNoDocAttributes(this IDeepSleepApi operations, string explicitEnumProperty = default(string), string nullableExplicitEnumProperty = default(string))
            {
                return operations.PatchEnumUriModelNoDocAttributesAsync(explicitEnumProperty, nullableExplicitEnumProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch the enum model with URI bound enums.
            /// </summary>
            /// <remarks>
            /// Offically patches the enum object to the service
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='explicitEnumProperty'>
            /// The explicit enum property. Possible values include: 'None', 'Item1',
            /// 'Item2'
            /// </param>
            /// <param name='nullableExplicitEnumProperty'>
            /// The nullable explicit enum property. Possible values include: 'None',
            /// 'Item1', 'Item2'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EnumUriObjectModelRs> PatchEnumUriModelNoDocAttributesAsync(this IDeepSleepApi operations, string explicitEnumProperty = default(string), string nullableExplicitEnumProperty = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchEnumUriModelNoDocAttributesWithHttpMessagesAsync(explicitEnumProperty, nullableExplicitEnumProperty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the enum from route.
            /// </summary>
            /// <remarks>
            /// Offically posts the enum nul object to the service
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumValue'>
            /// The enum value. Possible values include: 'None', 'Item1', 'Item2'
            /// </param>
            public static string GetEnumInRouteSimpleMember(this IDeepSleepApi operations, string enumValue)
            {
                return operations.GetEnumInRouteSimpleMemberAsync(enumValue).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the enum from route.
            /// </summary>
            /// <remarks>
            /// Offically posts the enum nul object to the service
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumValue'>
            /// The enum value. Possible values include: 'None', 'Item1', 'Item2'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetEnumInRouteSimpleMemberAsync(this IDeepSleepApi operations, string enumValue, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnumInRouteSimpleMemberWithHttpMessagesAsync(enumValue, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumValue'>
            /// The enum value. Possible values include: 'None', 'Item1', 'Item2'
            /// </param>
            public static void HeadEnumInRouteSimpleMember(this IDeepSleepApi operations, string enumValue)
            {
                operations.HeadEnumInRouteSimpleMemberAsync(enumValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumValue'>
            /// The enum value. Possible values include: 'None', 'Item1', 'Item2'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadEnumInRouteSimpleMemberAsync(this IDeepSleepApi operations, string enumValue, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadEnumInRouteSimpleMemberWithHttpMessagesAsync(enumValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Posts the int32 model with URI bound values.
            /// </summary>
            /// <remarks>
            /// Offically posts the int32 uri to the service
            ///
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='int32Property'>
            /// Gets or sets the int32 property.
            /// </param>
            /// <param name='nullableInt32Property'>
            /// Gets or sets the nullable int32 property.
            /// </param>
            /// <param name='uInt32Property'>
            /// Gets or sets the u int32 property.
            /// </param>
            /// <param name='nullableUInt32Property'>
            /// Gets or sets the nullable u int32 property.
            /// </param>
            public static Int32ObjectModelRq PostInt32UriModelNoDocAttributes(this IDeepSleepApi operations, int? int32Property = default(int?), int? nullableInt32Property = default(int?), int? uInt32Property = default(int?), int? nullableUInt32Property = default(int?))
            {
                return operations.PostInt32UriModelNoDocAttributesAsync(int32Property, nullableInt32Property, uInt32Property, nullableUInt32Property).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the int32 model with URI bound values.
            /// </summary>
            /// <remarks>
            /// Offically posts the int32 uri to the service
            ///
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='int32Property'>
            /// Gets or sets the int32 property.
            /// </param>
            /// <param name='nullableInt32Property'>
            /// Gets or sets the nullable int32 property.
            /// </param>
            /// <param name='uInt32Property'>
            /// Gets or sets the u int32 property.
            /// </param>
            /// <param name='nullableUInt32Property'>
            /// Gets or sets the nullable u int32 property.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Int32ObjectModelRq> PostInt32UriModelNoDocAttributesAsync(this IDeepSleepApi operations, int? int32Property = default(int?), int? nullableInt32Property = default(int?), int? uInt32Property = default(int?), int? nullableUInt32Property = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostInt32UriModelNoDocAttributesWithHttpMessagesAsync(int32Property, nullableInt32Property, uInt32Property, nullableUInt32Property, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the int32 combined route and query values.
            /// </summary>
            /// <remarks>
            /// Offically gets the combined int32 values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeint'>
            /// The route int.
            /// </param>
            /// <param name='queryInt1'>
            /// The query int1.
            /// </param>
            /// <param name='queryInt2'>
            /// The query int2.
            /// </param>
            public static int? GetInt32ValuesOverriddenOpId(this IDeepSleepApi operations, int routeint, int? queryInt1 = default(int?), int? queryInt2 = default(int?))
            {
                return operations.GetInt32ValuesOverriddenOpIdAsync(routeint, queryInt1, queryInt2).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the int32 combined route and query values.
            /// </summary>
            /// <remarks>
            /// Offically gets the combined int32 values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeint'>
            /// The route int.
            /// </param>
            /// <param name='queryInt1'>
            /// The query int1.
            /// </param>
            /// <param name='queryInt2'>
            /// The query int2.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetInt32ValuesOverriddenOpIdAsync(this IDeepSleepApi operations, int routeint, int? queryInt1 = default(int?), int? queryInt2 = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInt32ValuesOverriddenOpIdWithHttpMessagesAsync(routeint, queryInt1, queryInt2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeint'>
            /// The route int.
            /// </param>
            /// <param name='queryInt1'>
            /// The query int1.
            /// </param>
            /// <param name='queryInt2'>
            /// The query int2.
            /// </param>
            public static void HeadInt32ValuesOverriddenOpId(this IDeepSleepApi operations, int routeint, int? queryInt1 = default(int?), int? queryInt2 = default(int?))
            {
                operations.HeadInt32ValuesOverriddenOpIdAsync(routeint, queryInt1, queryInt2).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeint'>
            /// The route int.
            /// </param>
            /// <param name='queryInt1'>
            /// The query int1.
            /// </param>
            /// <param name='queryInt2'>
            /// The query int2.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadInt32ValuesOverriddenOpIdAsync(this IDeepSleepApi operations, int routeint, int? queryInt1 = default(int?), int? queryInt2 = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadInt32ValuesOverriddenOpIdWithHttpMessagesAsync(routeint, queryInt1, queryInt2, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the i list int array response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static IList<int?> GetSimpleIlistIntArrayResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                return operations.GetSimpleIlistIntArrayResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i list int array response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetSimpleIlistIntArrayResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleIlistIntArrayResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static void HeadSimpleIlistIntArrayResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                operations.HeadSimpleIlistIntArrayResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleIlistIntArrayResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleIlistIntArrayResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the i list int array request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The ints.
            /// </param>
            public static IList<int?> PostSimpleIlistIntArrayRequest(this IDeepSleepApi operations, IList<int?> body = default(IList<int?>))
            {
                return operations.PostSimpleIlistIntArrayRequestAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i list int array request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The ints.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> PostSimpleIlistIntArrayRequestAsync(this IDeepSleepApi operations, IList<int?> body = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSimpleIlistIntArrayRequestWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Simples the i enumerable int array response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static IList<int?> GetSimpleIenumerableIntArrayResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                return operations.GetSimpleIenumerableIntArrayResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i enumerable int array response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetSimpleIenumerableIntArrayResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleIenumerableIntArrayResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static void HeadSimpleIenumerableIntArrayResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                operations.HeadSimpleIenumerableIntArrayResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleIenumerableIntArrayResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleIenumerableIntArrayResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the i enumerable int array request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The ints.
            /// </param>
            public static IList<int?> PostSimpleIenumerableIntArrayRequest(this IDeepSleepApi operations, IList<int?> body = default(IList<int?>))
            {
                return operations.PostSimpleIenumerableIntArrayRequestAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i enumerable int array request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The ints.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> PostSimpleIenumerableIntArrayRequestAsync(this IDeepSleepApi operations, IList<int?> body = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSimpleIenumerableIntArrayRequestWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Simples the array int array response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static IList<int?> GetSimpleArrayIntArrayResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                return operations.GetSimpleArrayIntArrayResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the array int array response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetSimpleArrayIntArrayResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleArrayIntArrayResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static void HeadSimpleArrayIntArrayResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                operations.HeadSimpleArrayIntArrayResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleArrayIntArrayResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleArrayIntArrayResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the array int array request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The ints.
            /// </param>
            public static IList<int?> PostSimpleArrayIntArrayRequest(this IDeepSleepApi operations, IList<int?> body = default(IList<int?>))
            {
                return operations.PostSimpleArrayIntArrayRequestAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the array int array request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The ints.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> PostSimpleArrayIntArrayRequestAsync(this IDeepSleepApi operations, IList<int?> body = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSimpleArrayIntArrayRequestWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Simples the i list int array query string.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            public static int? GetSimpleIlistIntArrayQuerystring(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>))
            {
                return operations.GetSimpleIlistIntArrayQuerystringAsync(queryItems).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i list int array query string.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetSimpleIlistIntArrayQuerystringAsync(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleIlistIntArrayQuerystringWithHttpMessagesAsync(queryItems, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            public static void HeadSimpleIlistIntArrayQuerystring(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>))
            {
                operations.HeadSimpleIlistIntArrayQuerystringAsync(queryItems).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleIlistIntArrayQuerystringAsync(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleIlistIntArrayQuerystringWithHttpMessagesAsync(queryItems, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the i enumerable int array query string.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            public static int? GetSimpleIenumerableIntArrayQuerystring(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>))
            {
                return operations.GetSimpleIenumerableIntArrayQuerystringAsync(queryItems).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i enumerable int array query string.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetSimpleIenumerableIntArrayQuerystringAsync(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleIenumerableIntArrayQuerystringWithHttpMessagesAsync(queryItems, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            public static void HeadSimpleIenumerableIntArrayQuerystring(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>))
            {
                operations.HeadSimpleIenumerableIntArrayQuerystringAsync(queryItems).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleIenumerableIntArrayQuerystringAsync(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleIenumerableIntArrayQuerystringWithHttpMessagesAsync(queryItems, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the array int array query string.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            public static int? GetSimpleArrayIntArrayQuerystring(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>))
            {
                return operations.GetSimpleArrayIntArrayQuerystringAsync(queryItems).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the array int array query string.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetSimpleArrayIntArrayQuerystringAsync(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleArrayIntArrayQuerystringWithHttpMessagesAsync(queryItems, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            public static void HeadSimpleArrayIntArrayQuerystring(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>))
            {
                operations.HeadSimpleArrayIntArrayQuerystringAsync(queryItems).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryItems'>
            /// The query items.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleArrayIntArrayQuerystringAsync(this IDeepSleepApi operations, IList<int?> queryItems = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleArrayIntArrayQuerystringWithHttpMessagesAsync(queryItems, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the i dictionary string string response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static IDictionary<string, string> GetSimpleIdctionaryStringStringResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                return operations.GetSimpleIdctionaryStringStringResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i dictionary string string response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetSimpleIdctionaryStringStringResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleIdctionaryStringStringResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static void HeadSimpleIdctionaryStringStringResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                operations.HeadSimpleIdctionaryStringStringResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleIdctionaryStringStringResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleIdctionaryStringStringResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Simples the i dictionary int string response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static IDictionary<string, string> GetSimpleIdctionaryIntStringResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                return operations.GetSimpleIdctionaryIntStringResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simples the i dictionary int string response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetSimpleIdctionaryIntStringResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSimpleIdctionaryIntStringResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static void HeadSimpleIdctionaryIntStringResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                operations.HeadSimpleIdctionaryIntStringResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadSimpleIdctionaryIntStringResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadSimpleIdctionaryIntStringResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Objects the i dictionary string dictionary object response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static IDictionary<string, DictionaryObject> GetObjectIdctionaryStringDictionaryobjectResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                return operations.GetObjectIdctionaryStringDictionaryobjectResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Objects the i dictionary string dictionary object response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, DictionaryObject>> GetObjectIdctionaryStringDictionaryobjectResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetObjectIdctionaryStringDictionaryobjectResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            public static void HeadObjectIdctionaryStringDictionaryobjectResponse(this IDeepSleepApi operations, int? count = default(int?))
            {
                operations.HeadObjectIdctionaryStringDictionaryobjectResponseAsync(count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='count'>
            /// The count.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadObjectIdctionaryStringDictionaryobjectResponseAsync(this IDeepSleepApi operations, int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadObjectIdctionaryStringDictionaryobjectResponseWithHttpMessagesAsync(count, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Posts the touple simple.
            /// </summary>
            /// <remarks>
            /// Post Touple Simple Custom Endpoint Description
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            public static object PostToupleSimpleCustomOperation(this IDeepSleepApi operations, object body = default(object))
            {
                return operations.PostToupleSimpleCustomOperationAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the touple simple.
            /// </summary>
            /// <remarks>
            /// Post Touple Simple Custom Endpoint Description
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostToupleSimpleCustomOperationAsync(this IDeepSleepApi operations, object body = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostToupleSimpleCustomOperationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Posts the basic object model with void return.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model with void return.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            public static void PostBasicObjectModelReturnVoid(this IDeepSleepApi operations, BasicObject body = default(BasicObject))
            {
                operations.PostBasicObjectModelReturnVoidAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the basic object model with void return.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model with void return.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostBasicObjectModelReturnVoidAsync(this IDeepSleepApi operations, BasicObject body = default(BasicObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostBasicObjectModelReturnVoidWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Posts the basic object model with task return.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model with task return.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            public static void PostBasicObjectModelReturnTask(this IDeepSleepApi operations, BasicObject body = default(BasicObject))
            {
                operations.PostBasicObjectModelReturnTaskAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the basic object model with task return.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model with task return.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostBasicObjectModelReturnTaskAsync(this IDeepSleepApi operations, BasicObject body = default(BasicObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostBasicObjectModelReturnTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Posts the basic object model with task 202 return.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model with task 202 return.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            public static void PostBasicObjectModelReturnTaskWith202Attribute(this IDeepSleepApi operations, BasicObject body = default(BasicObject))
            {
                operations.PostBasicObjectModelReturnTaskWith202AttributeAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the basic object model with task 202 return.
            /// </summary>
            /// <remarks>
            /// Offically posts the basic object model with task 202 return.
            /// Here's some documentation:
            /// &lt;a href="http://www.google.com" /&gt;.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostBasicObjectModelReturnTaskWith202AttributeAsync(this IDeepSleepApi operations, BasicObject body = default(BasicObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostBasicObjectModelReturnTaskWith202AttributeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void PostBasicObjectModelReturnTaskWith200DefaultAttribute(this IDeepSleepApi operations, BasicObject body = default(BasicObject))
            {
                operations.PostBasicObjectModelReturnTaskWith200DefaultAttributeAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostBasicObjectModelReturnTaskWith200DefaultAttributeAsync(this IDeepSleepApi operations, BasicObject body = default(BasicObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostBasicObjectModelReturnTaskWith200DefaultAttributeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
