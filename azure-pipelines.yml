# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: ubuntu-20.04

variables:
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: true

steps:
- task: UseDotNet@2
  displayName: 'Use NetCore 3.1.x'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
- task: UseDotNet@2
  displayName: 'Use NetCore 5.0.x'
  inputs:
    packageType: 'sdk'
    version: '5.0.x'
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '**/*.sln'
    feedsToUse: 'config'
    nugetConfigPath: 'NuGet.Config'
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: 'DeepSleep.sln'
    arguments: '--configuration $(BuildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: '**/*[Tt]ests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" --no-build'
    publishTestResults: false
- task: reportgenerator@4
  displayName: 'Generate Code Coverage'
  inputs:
    reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    classfilters: '+*;-DeepSleep.Api.*;-Api.DeepSleep.*'
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
- task: NuGetToolInstaller@1
  displayName: 'Use NuGet '
  inputs:
    checkLatest: true
- task: NuGetCommand@2
  displayName: 'nuget pack DeepSleep'
  inputs:
    command: pack
    packagesToPack: src/DeepSleep/.pack/DeepSleep.nuspec
- task: NuGetCommand@2
  displayName: 'nuget push DeepSleep'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/DeepSleep.*.*.*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'Nuget Service Connection'
    verbosityPush: 'Normal'
    allowPackageConflicts: true
- task: NuGetCommand@2
  displayName: 'nuget pack DeepSleep.OpenApi'
  inputs:
    command: pack
    packagesToPack: src/DeepSleep.OpenApi/.pack/DeepSleep.OpenApi.nuspec
- task: NuGetCommand@2
  displayName: 'nuget push DeepSleep.OpenApi'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/DeepSleep.OpenApi.*.*.*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'Nuget Service Connection'
    verbosityPush: 'Normal'
    allowPackageConflicts: true
- task: NuGetCommand@2
  displayName: 'nuget pack DeepSleep.Web'
  inputs:
    command: pack
    packagesToPack: src/DeepSleep.Web/.pack/DeepSleep.Web.nuspec
- task: NuGetCommand@2
  displayName: 'nuget push DeepSleep.Web'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/DeepSleep.Web.*.*.*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'Nuget Service Connection'
    verbosityPush: 'Normal'
    allowPackageConflicts: true